<?php
/**
 * Bancha Project : Seamlessly integrates CakePHP with ExtJS and Sencha Touch (http://banchaproject.org)
 * Copyright 2011-2013 codeQ e.U.
 *
 * @package       Bancha.Test.Case.Network
 * @copyright     Copyright 2011-2013 codeQ e.U.
 * @link          http://banchaproject.org Bancha Project
 * @since         Bancha v 0.9.0
 * @author        Florian Eckerstorfer <f.eckerstorfer@gmail.com>
 * @author        Roland Schuetz <mail@rolandschuetz.at>
 */

App::uses('BanchaResponseTransformer', 'Bancha.Bancha/Network');

/**
 * BanchaResponseTransformerTest
 *
 * @package       Bancha.Test.Case.Network
 * @author        Roland Schuetz <mail@rolandschuetz.at>
 * @author        Florian Eckerstorfer <f.eckerstorfer@gmail.com>
 * @since         Bancha v 0.9.0
 */
class BanchaResponseTransformerTest extends CakeTestCase {
	public $fixtures = array('plugin.bancha.article');

/**
 * Test how the BanchaResponseTransformer handles primitive and non-primitive
 * results which are not tied to a model.
 * 
 * @param $cakeResponse cake response to transform
 * @param $expectedResponse the expected sencha response
 * 
 * @dataProvider transformNonModelRecordCasesDataProvider
 */
	public function testTransformNonModelRecordCases($cakeResponse, $expectedResponse) {
		$request = new CakeRequest();
		$request->addParams(array(
			'controller'	=> 'Articles',
			'action'		=> 'delete'
		));

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue(isset($result['success']), 'Expected result to have a sucesss property, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}
	/**
	 * Data provider for testTransformNonModelRecordCases
	 */
	public function transformNonModelRecordCasesDataProvider() {
		return array(
			// primitive responses are the success value
			array( true, array('success'=>true) ),
			array( false, array('success'=>false) ),
			// responses with an success value are passed through
			array( array('success'=>true,'msg'=>'lala'), array('success'=>true,'msg'=>'lala') ), // there is a success, nothing to change
			array( array('success'=>true), array('success'=>true) ), // already in ext(-like) structure
			array( array('success'=>'true'), array('success'=>true) ), // already in ext(-like) structure, only convert property into a boolean
			array( array('success'=>'false'), array('success'=>false) ), // already in ext(-like) structure, only convert property into a boolean
			array( array('success'=>'true','message'=>'lala'), array('success'=>true,'message'=>'lala') ), // already in ext(-like) structure
			// arbitary data is wrapped into the data property
			array( 'lala', array('success'=>true,'data'=>'lala') ),
			array( -1, array('success'=>true,'data'=>-1) ),
			array( 0, array('success'=>true,'data'=>0) ),
			array( 1, array('success'=>true,'data'=>1) ),
			array( array('lala','lolo'), array('success'=>true,'data'=>array('lala','lolo')) ),
		);
	}

/**
 * Test how the BanchaResponseTransformer handles objects.
 * This is a strange case, expect this should be the data.
 */
	public function testTransformObjectResults() {
		$request = new CakeRequest();
		$request->addParams(array(
			'controller'	=> 'Articles',
			'action'		=> 'delete'
		));

		$cakeResponse = new stdClass();
		$cakeResponse->someProperty = 'someValue';

		// create a similar object
		$expectedResponse = new stdClass();
		$expectedResponse->someProperty = 'someValue';

		// now build the expected response
		$expectedResponse = array(
			'success' => true,
			'data' => $expectedResponse
		);

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue(isset($result['success']), 'Expected result to have a sucsess property, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

/**
 * Tests the transform() method for a single returned record
 */
	public function testTransformSingleRecord() {
		// Response generated by CakePHP.
		$cakeResponse = array(
			'Article' => array(
				'id'        => 304,
				'title'     => 'foo',
				'date'      => '2011-11-21 01:50:00',
				'body'      => 'This is the text for foo',
				'published' => false,
				'user_id'   => 95
			),
		);

		$request = new CakeRequest();
		$request->addParams(array(
			'controller'	=> 'Articles',
			'action'			=> 'view'
		));

		// Response expected by Ext JS (in JSON).
		$expectedResponse = array(
			'success' => true,
			'data' => array(
				'id'        => 304,
				'title'     => 'foo',
				'date'      => '2011-11-21 01:50:00',
				'body'      => 'This is the text for foo',
				'published' => false,
				'user_id'   => 95
			),
		);

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

/**
 * Tests the transform() method for a single returned record
 * with filtering of model fields
 */
	public function testTransformSingleRecord_Filtered() {
		// Response generated by CakePHP.
		$cakeResponse = array(
			'Article' => array(
				'id'        => 304,
				'title'     => 'foo',
				'date'      => '2011-11-21 01:50:00', // should not be in result set
				'body'      => 'This is the text for foo',
				'published' => false,
				'user_id'   => 95 // should not be in result set
			),
		);

		$request = new CakeRequest();
		$request->addParams(array(
			'controller' => 'Articles',
			'action'     => 'view'
		));

		// Configure the model to not expose date and user_id
		$TestModel = ClassRegistry::init('Article');
		$TestModel->Behaviors->attach('Bancha.BanchaRemotable', array(
			'excludedFields' => array('date', 'user_id')
		));

		// Response expected by Ext JS (in JSON).
		$expectedResponse = array(
			'success' => true,
			'data'    => array(
				'id'        => 304,
				'title'	    => 'foo',
				'body'      => 'This is the text for foo',
				'published' => false
			),
		);

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

/**
 * Tests the transform() method for multiple return records
 *
 */
	public function testTransformMultipleRecords() {
		// Response generated by CakePHP
		$cakeResponse = array(
			array(
				'Article' => array(
					'id'        => 304,
					'title'     => 'foo',
					'date'      => '2011-11-21 01:50:00',
					'body'      => 'This is the text for foo',
					'published' => false,
					'user_id'   => 95
				),
			),
			array(
				'Article' => array(
					'id'        => 305,
					'title'	    => 'bar',
					'date'      => '2011-12-21 01:50:00',
					'body'      => 'This is the text for bar',
					'published' => false,
					'user_id'   => 95
				),
			)
		);

		$request = new CakeRequest();
		$request->addParams(array(
			'controller' => 'Articles',
			'action'     => 'index',
		));

		// Response expected by Ext JS (in JSON).
		$expectedResponse = array(
			'success' => true,
			'data' => array(
				array(
					'id'        => 304,
					'title'     => 'foo',
					'date'      => '2011-11-21 01:50:00',
					'body'      => 'This is the text for foo',
					'published' => false,
					'user_id'   => 95
				),
				array(
					'id'        => 305,
					'title'     => 'bar',
					'date'      => '2011-12-21 01:50:00',
					'body'      => 'This is the text for bar',
					'published' => false,
					'user_id'   => 95
				),
			),
		);

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

/**
 * Tests the transform() method for multiple return records
 * with filtering of model fields
 */
	public function testTransformMultipleRecords_Filtered() {
		// Response generated by CakePHP
		$cakeResponse = array(
			array(
				'Article' => array(
					'id'        => 304,
					'title'     => 'foo',
					'date'      => '2011-11-21 01:50:00', // should not be in result set
					'body'      => 'This is the text for foo',
					'published' => false,
					'user_id'   => 95 // should not be in result set
				),
			),
			array(
				'Article' => array(
					'id'        => 305,
					'title'     => 'bar',
					'date'      => '2011-12-21 01:50:00', // should not be in result set
					'body'      => 'This is the text for bar',
					'published' => false,
					'user_id'   => 95 // should not be in result set
				),
			)
		);

		$request = new CakeRequest();
		$request->addParams(array(
			'controller' => 'Articles',
			'action'     => 'index',
		));

		// Configure the model to not expose date and user_id
		$TestModel = ClassRegistry::init('Article');
		$TestModel->Behaviors->attach('Bancha.BanchaRemotable', array(
			'excludedFields' => array('date', 'user_id')
		));

		// Response expected by Ext JS (in JSON).
		$expectedResponse = array(
			'success' => true,
			'data' => array(
				array(
					'id'        => 304,
					'title'     => 'foo',
					'body'      => 'This is the text for foo',
					'published' => false,
				),
				array(
					'id'        => 305,
					'title'     => 'bar',
					'body'      => 'This is the text for bar',
					'published' => false,
				),
			),
		);

		$result = BanchaResponseTransformer::transform($cakeResponse, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

	
/**
 * Bancha understands cake responses with pagination data
 * @param $paginatedRecords cake response to transform
 * @param $expectedResponse Response expected by Ext JS (in JSON).
 *
 * @dataProvider getCakeRecords
 */
	public function testTransformPaginated($paginatedRecords, $expectedResponse) {
		$request = new CakeRequest();
		$request->addParams(array(
			'controller'	=> 'Articles',
			'action'		=> 'delete'
		));

		$result = BanchaResponseTransformer::transform($paginatedRecords, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}
	
	// data provider
	public function getCakeRecords() {
		return array(
			array(
				array('count'=>0,'records'=>array()),
				array('success'=>true,'total'=>0,'data'=>array())
			),
			array(
				array('count'=>9,'records'=>array(
					array('Article'=>array('id'=>5,'title'=>'whatever')),
					array('Article'=>array('id'=>6,'title'=>'whatever2'))
				)),
				array('success'=>true,'total'=>9,'data'=>array(
					array('id'=>5,'title'=>'whatever'),
					array('id'=>6,'title'=>'whatever2')
				)),
			)
		);
	}

/**
 * Bancha understands cake responses with pagination data.
 * Filtering should also be applied here.
 */
	public function testTransformPaginated_Filtered() {
		// testup
		$paginatedRecords = array(
			'count'   => 9,
			'records' => array(
				array(
					'Article'=>array(
						'id'        => 304,
						'title'     => 'foo',
						'date'      => '2011-11-21 01:50:00', // should not be in result set
						'body'      => 'This is the text for foo',
						'published' => false,
						'user_id'   => 95 // should not be in result set
					),
				),
				array(
					'Article'       => array(
						'id'        => 305,
						'title'	    => 'bar',
						'date'      => '2011-12-21 01:50:00', // should not be in result set
						'body'      => 'This is the text for bar',
						'published' => false,
						'user_id'   => 95 // should not be in result set
					)
				)
			)
		);
		
		$expectedResponse = array(
			'success' => true,
			'total'   => 9,
			'data'    => array(
				array(
					'id'        => 304,
					'title'     => 'foo',
					'body'      => 'This is the text for foo',
					'published' => false,
				),
				array(
					'id'        => 305,
					'title'     => 'bar',
					'body'      => 'This is the text for bar',
					'published' => false,
				),
			),
		);

		// create request to pass through
		$request = new CakeRequest();
		$request->addParams(array(
			'controller'	=> 'Articles',
			'action'		=> 'delete'
		));

		// Configure the model to not expose date and user_id
		$TestModel = ClassRegistry::init('Article');
		$TestModel->Behaviors->attach('Bancha.BanchaRemotable', array(
			'excludedFields' => array('date', 'user_id')
		));
		
		$result = BanchaResponseTransformer::transform($paginatedRecords, $request);
		$this->assertTrue($result['success'], 'Expected result to have a sucess property with value true, instead got '.print_r($result,true));
		$this->assertEquals($expectedResponse, $result);
	}

}
