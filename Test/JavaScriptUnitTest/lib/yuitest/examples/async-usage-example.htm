<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Async Usage Example</title>


<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/3.2.0/build/cssfonts/fonts-min.css" />
<script type="text/javascript" src="http://yui.yahooapis.com/3.2.0/build/yui/yui-min.js"></script>
<script type="text/javascript" src="../javascript/build/yuitest/yuitest-min.js"></script>
<style type="text/css">
.yui3-skin-sam .yui3-console-entry-pass .yui3-console-entry-cat {
    background-color: green;
    color: #fff;
}

.yui3-skin-sam .yui3-console-entry-fail .yui3-console-entry-cat {
    background-color: red;
    color: #fff;
}

.yui3-skin-sam .yui3-console-entry-ignore .yui3-console-entry-cat {
    background-color: #666;
}

</style>
<body class="yui3-skin-sam  yui-skin-sam">

<h1>Async Usage Example</h1>

<p>This example shows how to create an asynchronous test with the YUI Test framework for testing browser-based JavaScript code.  A <code>YUITest.TestCase</code> object is created with a test that waits for a
  few seconds before continuing. The <code>YUITest.TestRunner</code> is then used to run the tests once the page has loaded.</p>

<div id="testLogger"></div>
<script type="text/javascript">
YUI().use("console", function (Y) {

    var asyncTestCase = new YUITest.TestCase({
    
        //name of the test case - if not provided, one is auto-generated
        name : "Asynchronous Tests",
        
        //---------------------------------------------------------------------
        // setUp and tearDown methods - optional
        //---------------------------------------------------------------------
        
        /*
         * Sets up data that is needed by each test.
         */
        setUp : function () {
            this.data = {
                name: "test",
                year: 2007,
                beta: true
            };
        },
        
        /*
         * Cleans up everything that was created by setUp().
         */
        tearDown : function () {
            delete this.data;
        },
                
        //---------------------------------------------------------------------
        // Test methods - names must begin with "test"
        //---------------------------------------------------------------------
        
        testWait : function (){
            var Assert = YUITest.Assert;
            
            //do some assertions now
            Assert.isTrue(this.data.beta);
            Assert.isNumber(this.data.year);
            
            //wait five seconds and do some more
            this.wait(function(){
            
                Assert.isString(this.data.name);                
            
            }, 5000);
        
        }
                    
    });

    //create the console
    var r = new Y.Console({
        newestOnTop : false,
        style: 'block' // to anchor in the example content
    });
    
    r.render('#testLogger');
    
    var TestRunner = YUITest.TestRunner;
    
    TestRunner.add(asyncTestCase);
    
    
    //function to handle events generated by the testrunner
    function logEvent(event){
        
        //data variables
        var message = "",
            messageType = "";
        
        switch(event.type){
            case TestRunner.BEGIN_EVENT:
                message = "Testing began at " + (new Date()).toString() + ".";
                messageType = "info";
                break;
                
            case TestRunner.COMPLETE_EVENT:
                message = Y.substitute("Testing completed at " +
                    (new Date()).toString() + ".\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
                
            case TestRunner.TEST_FAIL_EVENT:
                message = event.testName + ": failed.\n" + event.error.getMessage();
                messageType = "fail";
                break;
                
            case TestRunner.TEST_IGNORE_EVENT:
                message = event.testName + ": ignored.";
                messageType = "ignore";
                break;
                
            case TestRunner.TEST_PASS_EVENT:
                message = event.testName + ": passed.";
                messageType = "pass";
                break;
                
            case TestRunner.TEST_SUITE_BEGIN_EVENT:
                message = "Test suite \"" + event.testSuite.name + "\" started.";
                messageType = "info";
                break;
                
            case TestRunner.TEST_SUITE_COMPLETE_EVENT:
                message = Y.substitute("Test suite \"" +
                    event.testSuite.name + "\" completed" + ".\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
                
            case TestRunner.TEST_CASE_BEGIN_EVENT:
                message = "Test case \"" + event.testCase.name + "\" started.";
                messageType = "info";
                break;
                
            case TestRunner.TEST_CASE_COMPLETE_EVENT:
                message = Y.substitute("Test case \"" +
                    event.testCase.name + "\" completed.\n" +
                    "Passed:{passed} Failed:{failed} " +
                    "Total:{total} ({ignored} ignored)",
                    event.results);
                messageType = "info";
                break;
            default:
                message = "Unexpected event " + event.type;
                message = "info";
        }
    
        //only log if required
        Y.log(message, messageType, "TestRunner");
    }
    
    //listen for events to publish to the logger
    TestRunner.attach(TestRunner.BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_CASE_BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_CASE_COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_SUITE_BEGIN_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_SUITE_COMPLETE_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_PASS_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_FAIL_EVENT, logEvent);
    TestRunner.attach(TestRunner.TEST_IGNORE_EVENT, logEvent);
    

    //run the tests
    TestRunner.run();

});
</script>

</body>
</html>