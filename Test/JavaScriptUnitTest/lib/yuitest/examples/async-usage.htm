<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8">
<title>Async Usage Example</title>


<link type="text/css" rel="stylesheet" href="http://yui.yahooapis.com/3.2.0/build/cssfonts/fonts-min.css" />

<body class="yui3-skin-sam  yui-skin-sam">

<h1>Async Usage Example</h1>

<p>This example shows how to create an asynchronous test with the YUI Test framework for testing browser-based JavaScript code.  A <code>YUITest.TestCase</code> object is created with a test that waits for a
  few seconds before continuing. The <code>YUITest.TestRunner</code> is then used to run the tests once the page has loaded.</p>
<p><a href="async-usage-example.htm">See the example in action</a></p>

<h2>Creating the TestCase</h2>

<p>The first step is to create a new <code>YUITest.TestCase</code> object called <code>AsyncTestCase</code>.
  To do so, using the <code>YUITest.TestCase</code> constructor and pass in an object literal containing information about the tests to be run:</p>
<pre><code>var asyncTestCase = new YUITest.TestCase({

    //name of the test case - if not provided, one is auto-generated
    name : "Asynchronous Tests",

    //---------------------------------------------------------------------
    // setUp and tearDown methods - optional
    //---------------------------------------------------------------------

    /*
     * Sets up data that is needed by each test.
     */
    setUp : function () {
        this.data = {
            name: "test",
            year: 2007,
            beta: true
        };
    },

    /*
     * Cleans up everything that was created by setUp().
     */
    tearDown : function () {
        delete this.data;
    },

    //---------------------------------------------------------------------
    // Test methods - names must begin with "test"
    //---------------------------------------------------------------------

    testWait : function (){
        var Assert = YUITest.Assert;

        //do some assertions now
        Assert.isTrue(this.data.beta);
        Assert.isNumber(this.data.year);

        //wait five seconds and do some more
        this.wait(function(){

            Assert.isString(this.data.name);

        }, 5000);

    }

});
</code></pre>
<p>The object literal passed into the constructor contains two different sections. The first section contains the <code>name</code> property,
  which is used to determine which <code>YUITest.TestCase</code> is being executed. A name is necessary, so one is generated if it isn't specified.</p>
<p>Next, the <code>setUp()</code> and <code>tearDown()</code> methods are included. The <code>setUp()</code> method is used in a <code>YUITest.TestCase</code>
  to set up data that may be needed for tests to be completed. This method is called immediately before each test is executed. For this example,
  <code>setUp()</code> creates a data object. The <code>tearDown()</code> is responsible for undoing what was done in <code>setUp()</code>. It is
  run immediately after each test is run and, in this case, deletes the data object that was created by <code>setUp</code>. These methods are optional.</p>
<p>The second section contains the actual tests to be run. The only test is <code>testWait()</code>, which demonstrates using
  the <code>wait()</code> method to delay test execution. There are two arguments passed in: a function to run once the test resumes
  and the number of milliseconds to wait before running this function (same basic format as <code>setTimeout()</code>). When
  the test resumes, the function is executed in the context of the <code>YUITest.TestCase</code> object, meaning that it still has
  access to all of the same data as the test that called <code>wait()</code>, including properties and methods on the <code>YUITest.TestCase</code>
  itself. This example shows the anonymous function using both the <code>YUITest.Assert</code> object and the <code>data</code> property
  of the <code>YUITest.TestCase</code>.</p>
  
<h2>Setting up logging</h2>

<p>Since the standalone YUI Test library isn't a graphical library, you'll need to use something to visualize the results. This example uses a YUI 3 <code>Console</code> object. To output the appropriate information into the console, a function is created to handle <code>TestRunner</code> events:</p>

<pre><code>//function to handle events generated by the testrunner
var TestRunner = YUITest.TestRunner;

function logEvent(event){
    
    //data variables
    var message = "",
        messageType = "";
    
    switch(event.type){
        case TestRunner.BEGIN_EVENT:
            message = "Testing began at " + (new Date()).toString() + ".";
            messageType = "info";
            break;
            
        case TestRunner.COMPLETE_EVENT:
            message = Y.substitute("Testing completed at " +
                (new Date()).toString() + ".\n" +
                "Passed:{passed} Failed:{failed} " +
                "Total:{total} ({ignored} ignored)",
                event.results);
            messageType = "info";
            break;
            
        case TestRunner.TEST_FAIL_EVENT:
            message = event.testName + ": failed.\n" + event.error.getMessage();
            messageType = "fail";
            break;
            
        case TestRunner.TEST_IGNORE_EVENT:
            message = event.testName + ": ignored.";
            messageType = "ignore";
            break;
            
        case TestRunner.TEST_PASS_EVENT:
            message = event.testName + ": passed.";
            messageType = "pass";
            break;
            
        case TestRunner.TEST_SUITE_BEGIN_EVENT:
            message = "Test suite \"" + event.testSuite.name + "\" started.";
            messageType = "info";
            break;
            
        case TestRunner.TEST_SUITE_COMPLETE_EVENT:
            message = Y.substitute("Test suite \"" +
                event.testSuite.name + "\" completed" + ".\n" +
                "Passed:{passed} Failed:{failed} " +
                "Total:{total} ({ignored} ignored)",
                event.results);
            messageType = "info";
            break;
            
        case TestRunner.TEST_CASE_BEGIN_EVENT:
            message = "Test case \"" + event.testCase.name + "\" started.";
            messageType = "info";
            break;
            
        case TestRunner.TEST_CASE_COMPLETE_EVENT:
            message = Y.substitute("Test case \"" +
                event.testCase.name + "\" completed.\n" +
                "Passed:{passed} Failed:{failed} " +
                "Total:{total} ({ignored} ignored)",
                event.results);
            messageType = "info";
            break;
        default:
            message = "Unexpected event " + event.type;
            message = "info";
    }

    //only log if required
    Y.log(message, messageType, "TestRunner");
}

//listen for events to publish to the logger
TestRunner.attach(TestRunner.BEGIN_EVENT, logEvent);
TestRunner.attach(TestRunner.COMPLETE_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_CASE_BEGIN_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_CASE_COMPLETE_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_SUITE_BEGIN_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_SUITE_COMPLETE_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_PASS_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_FAIL_EVENT, logEvent);
TestRunner.attach(TestRunner.TEST_IGNORE_EVENT, logEvent);
</code></pre>

<p>The <code>logEvent()</code> function is used to handle all events. Based on the event, the message and the message type are determined and then a message is logged. This event handler is assigned to the <code>TestRunner</code> events by using the <code>attach()</code> method.</p>

<h2>Running the tests</h2>

<p>With all of the tests defined, the last step is to run them. This initialization is assigned to take place when all of the YUI
  components have been loaded:</p>

<pre><code>//create the console
var r = new Y.Console({
    verbose : true,
    newestOnTop : false
});

r.render('#testLogger');

TestRunner.add(asyncTestCase);

//run the tests
TestRunner.run();
</code></pre>

<p>Before running the tests, it's necessary to create a <code>Y.Console</code> object to display the results (otherwise the tests would run
  but you wouldn't see the results). After that, the <code>YUITest.TestRunner</code> is loaded with the <code>YUITest.TestCase</code> object by calling
  <code>add()</code> (any number of <code>YUITest.TestCase</code> and <code>YUITest.TestSuite</code> objects can be added to a <code>YUITest.TestRunner</code>,
  this example only adds one for simplicity). The very last step is to call <code>run()</code>, which begins executing the tests in its
  queue and displays the results in the <code>Y.Console</code>.</p>

</body>
</html>